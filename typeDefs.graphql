scalar DateTime

"""
A user who has been authorized by GitHub at least once
"""
type User {
  """
  The user's unique GitHub login
  """
  githubLogin: ID!

  """
  The user's first and last name
  """
  name: String

  """
  A url for the user's GitHub profile photo
  """
  avatar: String

  """
  All of the photos posted by this user
  """
  postedPhotos: [Photo!]!

  """
  All of the photos in which this user appears
  """
  inPhotos: [Photo!]!
}

"""
A category enum of photos
"""
enum PhotoCategory {
  """
  describe a selfie photo
  """
  SELFIE

  """
  describe a portrait photo
  """
  PORTRAIT

  """
  describe an action photo
  """
  ACTION

  """
  describe a landscape photo
  """
  LANDSCAPE

  """
  describe a graphic photo
  """
  GRAPHIC
}

"""
The details of a photo
"""
type Photo {
  """
  A photo's unique id
  """
  id: ID!

  """
  A photo's name
  """
  name: String!

  """
  A photo's url
  """
  url: String!

  """
  (optional) A photo's description
  """
  description: String

  """
  A photo's category
  """
  category: PhotoCategory!

  """
  A user that posted the Photo
  """
  postedBy: User!

  """
  The list of the user's tagged in the Photo
  """
  taggedUsers: [User!]!

  """
  The time the photo was created
  """
  created: DateTime!
}

"""
A custom type for auth object
"""
type AuthPayload {
  """
  A jwt token returned after a successful auth
  """
  token: String!

  """
  A user that was authenticated
  """
  user: User!
}

"""
A root type showing all the queries (READ)
"""
type Query {
  """
  A query that return the authenticated user from token
  """
  me: User

  """
  A query that returns the total number of photos
  """
  totalPhotos: Int!

  """
  A query that returns all the photos
  """
  allPhotos: [Photo!]!

  """
  A query that returns the total number of users
  """
  totalUsers: Int!

  """
  A query that return all users
  """
  allUsers: [User!]!
}

"""
The input sent with the postedPhoto Mutation
"""
input PostPhotoInput {
  """
  The name of the new photo
  """
  name: String!

  """
  (optional) The category that defines the photo (default = PORTRAIT)
  """
  category: PhotoCategory = PORTRAIT

  """
  (optional) A brief description of the photo
  """
  description: String
}

"""
A root type showing all the mutations (CREATE, UPDATE and DELETE)
"""
type Mutation {
  """
  A mutation to post a new photo
  """
  postPhoto(
    """
    The input sent with the postPhoto Mutation
    """
    input: PostPhotoInput!
  ): Photo!

  """
  A mutation to Authenticate a GitHub user
  """
  githubAuth(
    """
    A password or GitHub token
    """
    code: String!
  ): AuthPayload!

  """
  A mutation to add fake(mocked) users
  """
  addFakeUsers(
    """
    the count of user to be added (defaults = 1)
    """
    count: Int = 1
  ): [User!]!

  """
  A mutation to authenticate a fake user
  """
  fakeUserAuth(
    """
    The user's unique GitHub login
    """
    githubLogin: ID!
  ): AuthPayload!
}

"""
A root type showing all the subscriptions
"""
type Subscription {
  """
  A subscription to a posted photo
  """
  newPhoto: Photo!

  """
  A subscription to a registered user
  """
  newUser: User!
}
